<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
    <CodeSnippet Format="1.0.0">
        <Header>
			<Title>Model | Editable root model</Title>
			<Author>Mármarosi József</Author>
			<Description>Implements an editable root model.</Description>
			<Shortcut>c6ce-rm</Shortcut>
        </Header>
        <Snippet>
            <Code Language="CSharp">
                <![CDATA[/// <summary>
    /// Represents an editable $root_name$ object.
    /// </summary>
    [Serializable]
    [ValidationResourceType(typeof(ValidationText), ObjectName = "$ROOT_MODEL$")]
    public class $ROOT_MODEL$ : EditableModel<$ROOT_MODEL$, $ROOT_MODEL$Dto>
    {
        #region Properties

        public static readonly PropertyInfo<long?> $ROOT_MODEL$KeyProperty = RegisterProperty<long?>(nameof($ROOT_MODEL$Key));
        public long? $ROOT_MODEL$Key
        {
            get => GetProperty($ROOT_MODEL$KeyProperty);
            private set => SetProperty($ROOT_MODEL$KeyProperty, value);
        }

        public static readonly PropertyInfo<long?> $ROOT_MODEL$IdProperty = RegisterProperty<long?>(nameof($ROOT_MODEL$Id), RelationshipTypes.PrivateField);
        public string $ROOT_MODEL$Id
        {
            get => KeyHash.Encode(ID.$ROOT_MODEL$, $ROOT_MODEL$Key);
            set => $ROOT_MODEL$Key = KeyHash.Decode(ID.$ROOT_MODEL$, value);
        }

        public static readonly PropertyInfo<string> $ROOT_MODEL$CodeProperty = RegisterProperty<string>(nameof($ROOT_MODEL$Code));
        [Required]
        [MaxLength(10)]
        public string $ROOT_MODEL$Code
        {
            get => GetProperty($ROOT_MODEL$CodeProperty);
            set => SetProperty($ROOT_MODEL$CodeProperty, value);
        }

        public static readonly PropertyInfo<string> $ROOT_MODEL$NameProperty = RegisterProperty<string>(nameof($ROOT_MODEL$Name));
        [Required]
        [MaxLength(100)]
        public string $ROOT_MODEL$Name
        {
            get => GetProperty($ROOT_MODEL$NameProperty);
            set => SetProperty($ROOT_MODEL$NameProperty, value);
        }

        public static readonly PropertyInfo<$CHILD_MODEL$s> $CHILD_MODEL$sProperty = RegisterProperty<$CHILD_MODEL$s>(nameof($CHILD_MODEL$s));
        public $CHILD_MODEL$s $CHILD_MODEL$s
        {
            get => GetProperty($CHILD_MODEL$sProperty);
            private set => LoadProperty($CHILD_MODEL$sProperty, value);
        }

        public static readonly PropertyInfo<DateTimeOffset?> TimestampProperty = RegisterProperty<DateTimeOffset?>(nameof(Timestamp));
        public DateTimeOffset? Timestamp
        {
            get => GetProperty(TimestampProperty);
            private set => LoadProperty(TimestampProperty, value);
        }

        #endregion

        #region Business Rules

        //protected override void AddBusinessRules()
        //{
        //    // Call base class implementation to add data annotation rules to BusinessRules.
        //    // NOTE: DataAnnotation rules is always added with Priority = 0.
        //    base.AddBusinessRules();

        //    // Add validation rules.
        //    BusinessRules.AddRule(new Required($ROOT_MODEL$NameProperty));

        //    // Add authorization rules.
        //    BusinessRules.AddRule(
        //        new IsInRole(
        //            AuthorizationActions.ReadProperty,
        //            $ROOT_MODEL$NameProperty,
        //            "Manager"
        //            )
        //        );
        //}

        //private static void AddObjectAuthorizationRules()
        //{
        //    // Add authorization rules.
        //    BusinessRules.AddRule(
        //        typeof($ROOT_MODEL$),
        //        new IsInRole(
        //            AuthorizationActions.EditObject,
        //            "Manager"
        //            )
        //        );
        //}

        #endregion

        #region Business Methods

        /// <summary>
        /// Updates an editable model and its children from the data transfer object.
        /// </summary>
        /// <param name="dto">The data transfer object.</param>
        /// <param name="childFactory">The child data portal factory.</param>
        public override void SetValuesOnBuild(
            $ROOT_MODEL$Dto dto,
            IChildDataPortalFactory childFactory
            )
        {
            DataMapper.Map(dto, this, "$CHILD_MODEL$s");
            BusinessRules.CheckRules();
            $CHILD_MODEL$s.SetValuesById(dto.$CHILD_MODEL$s, "$CHILD_MODEL$Id", childFactory);
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Gets a new $root_name$ to edit.
        /// </summary>
        /// <param name="factory">The data portal factory.</param>
        /// <returns>The new $root_name$.</returns>
        public static async Task<$ROOT_MODEL$> New(
            IDataPortalFactory factory
            )
        {
            return await factory.GetPortal<$ROOT_MODEL$>().CreateAsync();
        }

        /// <summary>
        /// Gets the specified $root_name$ to edit.
        /// </summary>
        /// <param name="factory">The data portal factory.</param>
        /// <param name="id">The identifier of the $root_name$.</param>
        /// <returns>The requested $root_name$.</returns>
        public static async Task<$ROOT_MODEL$> Get(
            IDataPortalFactory factory,
            string id
            )
        {
            var criteria = new $ROOT_MODEL$Params(id);
            return await factory.GetPortal<$ROOT_MODEL$>().FetchAsync(criteria.Decode());
        }

        /// <summary>
        /// Builds a new or existing $root_name$.
        /// </summary>
        /// <param name="factory">The data portal factory.</param>
        /// <param name="childFactory">The child data portal factory.</param>
        /// <param name="dto"></param>
        /// <returns>The $root_name$ built.</returns>
        public static async Task<$ROOT_MODEL$> Build(
            IDataPortalFactory factory,
            IChildDataPortalFactory childFactory,
            $ROOT_MODEL$Dto dto
            )
        {
            long? $RootParam$Key = KeyHash.Decode(ID.$ROOT_MODEL$, dto.$ROOT_MODEL$Id);
            $ROOT_MODEL$ $RootParam$ = $RootParam$Key.HasValue ?
                await Get(factory, dto.$ROOT_MODEL$Id) :
                await New(factory);
            $RootParam$.SetValuesOnBuild(dto, childFactory);
            return $RootParam$;
        }

        /// <summary>
        /// Deletes the specified $root_name$.
        /// </summary>
        /// <param name="factory">The data portal factory.</param>
        /// <param name="id">The identifier of the $root_name$.</param>
        public static async Task Delete(
            IDataPortalFactory factory,
            string id
            )
        {
            var criteria = new $ROOT_MODEL$Params(id);
            await factory.GetPortal<$ROOT_MODEL$>().DeleteAsync(criteria.Decode());
        }

        #endregion

        #region Data Access

        [Create]
        [RunLocal]
        private void Create(
            [Inject] IChildDataPortal<$CHILD_MODEL$s> itemsPortal
            )
        {
            // Load default values.
            $CHILD_MODEL$s = itemsPortal.CreateChild();
            //LoadProperty($ROOT_MODEL$CodeProperty, "");
            //BusinessRules.CheckRules();
        }

        [Fetch]
        private void Fetch(
            $ROOT_MODEL$Criteria criteria,
            [Inject] I$ROOT_MODEL$Dal dal,
            [Inject] IChildDataPortal<$CHILD_MODEL$s> itemsPortal
            )
        {
            // Load values from persistent storage.
            $ROOT_MODEL$Dao dao = dal.Fetch(criteria);
            using (BypassPropertyChecks)
            {
                DataMapper.Map(dao, this, "$CHILD_MODEL$s");
                $CHILD_MODEL$s = itemsPortal.FetchChild(dao.$CHILD_MODEL$s);
            }
        }

        [Insert]
        protected void Insert(
            [Inject] I$ROOT_MODEL$Dal dal
            )
        {
            // Insert values into persistent storage.
            using (var transaction = dal.BeginTransaction())
            {
                using (BypassPropertyChecks)
                {
                    var dao = Copy.PropertiesFrom(this).Omit("$CHILD_MODEL$s").ToNew<$ROOT_MODEL$Dao>();
                    dal.Insert(dao);

                    // Set new data.
                    $ROOT_MODEL$Key = dao.$ROOT_MODEL$Key;
                    Timestamp = dao.Timestamp;
                }
                FieldManager.UpdateChildren(this);
                dal.Commit(transaction);
            }
        }

        [Update]
        protected void Update(
            [Inject] I$ROOT_MODEL$Dal dal
            )
        {
            // Update values in persistent storage.
            using (var transaction = dal.BeginTransaction())
            {
                if (IsSelfDirty)
                {
                    using (BypassPropertyChecks)
                    {
                        var dao = Copy.PropertiesFrom(this).Omit("$CHILD_MODEL$s").ToNew<$ROOT_MODEL$Dao>();
                        dal.Update(dao);

                        // Set new data.
                        Timestamp = dao.Timestamp;
                    }
                }
                FieldManager.UpdateChildren(this);
                dal.Commit(transaction);
            }
        }

        [DeleteSelf]
        protected void DeleteSelf(
            [Inject] I$ROOT_MODEL$Dal dal,
            [Inject] IChildDataPortal<$CHILD_MODEL$s> itemPortal
            )
        {
            using (BypassPropertyChecks)
                Delete(new $ROOT_MODEL$Criteria($ROOT_MODEL$Key), dal, itemPortal);
        }

        [Delete]
        protected void Delete(
            $ROOT_MODEL$Criteria criteria,
            [Inject] I$ROOT_MODEL$Dal dal,
            [Inject] IChildDataPortal<$CHILD_MODEL$s> itemPortal
            )
        {
            // Delete values from persistent storage.
            using (var transaction = dal.BeginTransaction())
            {
                if (!$ROOT_MODEL$Key.HasValue)
                    Fetch(criteria, dal, itemPortal);

                $CHILD_MODEL$s.Clear();
                FieldManager.UpdateChildren(this);

                dal.Delete(criteria);
                dal.Commit(transaction);
            }
        }

        #endregion
    }]]>
            </Code>
            <Declarations>
                <Literal>
                    <ID>RootModel</ID>
                    <ToolTip>The name of the root model.</ToolTip>
                    <Default>RootModel</Default>
                </Literal>
				<Literal>
					<ID>RootParam</ID>
					<ToolTip>The name of the root parameter.</ToolTip>
					<Default>RootParam</Default>
				</Literal>
				<Literal>
                    <ID>RootName</ID>
                    <ToolTip>The model name in comments.</ToolTip>
                    <Default>RootName</Default>
                </Literal>
				<Literal>
					<ID>ChildModel</ID>
					<ToolTip>The name of the child model.</ToolTip>
					<Default>ChildModel</Default>
				</Literal>
			</Declarations>
        </Snippet>
    </CodeSnippet>
</CodeSnippets>
