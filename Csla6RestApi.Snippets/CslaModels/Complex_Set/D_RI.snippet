<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
    <CodeSnippet Format="1.0.0">
        <Header>
			<Title>DAL | Editable root set item</Title>
			<Author>Mármarosi József</Author>
			<Description>Implements the data access of the editable root set item.</Description>
			<Shortcut>c6cs-ri-d</Shortcut>
        </Header>
        <Snippet>
            <Code Language="CSharp">
                <![CDATA[/// <summary>
    /// Implements the data access functions of the editable $root_name$ set item object.
    /// </summary>
    [DalImplementation]
    public class $ROOT_MODEL$SetItemDal : DalBase<SqlServerContext>, I$ROOT_MODEL$SetItemDal
    {
        #region Constructor

        /// <summary>
        /// Instantiates the data access object.
        /// </summary>
        /// <param name="context">The database context.</param>
        public $ROOT_MODEL$SetItemDal(
            SqlServerContext dbContext
            )
        {
            DbContext = dbContext;
        }

        #endregion Constructor

        #region Insert

        /// <summary>
        /// Creates a new $root_name$ using the specified data.
        /// </summary>
        /// <param name="dao">The data of the $root_name$.</param>
        public void Insert(
            $ROOT_MODEL$SetItemDao dao
            )
        {
            // Check unique $root_name$ code.
            var $RootParam$ = DbContext.$ROOT_MODEL$s
                .Where(e =>
                    e.$ROOT_MODEL$Code == dao.$ROOT_MODEL$Code
                )
                .FirstOrDefault();
            if ($RootParam$ != null)
                throw new DataExistException(DalText.$ROOT_MODEL$SetItem_$ROOT_MODEL$CodeExists.With(dao.$ROOT_MODEL$Code));

            // Create the new $root_name$.
            $RootParam$ = new $ROOT_MODEL$
            {
                $ROOT_MODEL$Code = dao.$ROOT_MODEL$Code,
                $ROOT_MODEL$Name = dao.$ROOT_MODEL$Name
            };
            DbContext.$ROOT_MODEL$s.Add($RootParam$);

            int count = DbContext.SaveChanges();
            if (count == 0)
                throw new InsertFailedException(DalText.$ROOT_MODEL$SetItem_InsertFailed.With($RootParam$.$ROOT_MODEL$Code));

            // Return new data.
            dao.$ROOT_MODEL$Key = $RootParam$.$ROOT_MODEL$Key;
            dao.Timestamp = $RootParam$.Timestamp;
        }

        #endregion Insert

        #region Update

        /// <summary>
        /// Updates an existing $root_name$ using the specified data.
        /// </summary>
        /// <param name="dao">The data of the $root_name$.</param>
        public void Update(
            $ROOT_MODEL$SetItemDao dao
            )
        {
            // Get the specified $root_name$.
            var $RootParam$ = DbContext.$ROOT_MODEL$s
                .Where(e =>
                    e.$ROOT_MODEL$Key == dao.$ROOT_MODEL$Key
                )
                .FirstOrDefault()
                ?? throw new DataNotFoundException(DalText.$ROOT_MODEL$SetItem_NotFound.With(dao.$ROOT_MODEL$Code));
            if ($RootParam$.Timestamp != dao.Timestamp)
                throw new ConcurrencyException(DalText.$ROOT_MODEL$SetItem_Concurrency.With(dao.$ROOT_MODEL$Code));

            // Check unique $root_name$ code.
            if ($RootParam$.$ROOT_MODEL$Code != dao.$ROOT_MODEL$Code)
            {
                int exist = DbContext.$ROOT_MODEL$s
                    .Where(e =>
                        e.$ROOT_MODEL$Code == dao.$ROOT_MODEL$Code &&
                        e.$ROOT_MODEL$Key != $RootParam$.$ROOT_MODEL$Key
                    )
                    .Count();
                if (exist > 0)
                    throw new DataExistException(DalText.$ROOT_MODEL$SetItem_$ROOT_MODEL$CodeExists.With(dao.$ROOT_MODEL$Code));
            }

            // Update the $root_name$.
            $RootParam$.$ROOT_MODEL$Code = dao.$ROOT_MODEL$Code;
            $RootParam$.$ROOT_MODEL$Name = dao.$ROOT_MODEL$Name;
            $RootParam$.Timestamp = DateTime.Now; // Force update timestamp.

            int count = DbContext.SaveChanges();
            if (count == 0)
                throw new UpdateFailedException(DalText.$ROOT_MODEL$SetItem_UpdateFailed.With($RootParam$.$ROOT_MODEL$Code));

            // Return new data.
            dao.Timestamp = $RootParam$.Timestamp;
        }

        #endregion Update

        #region Delete

        /// <summary>
        /// Deletes the specified $root_name$.
        /// </summary>
        /// <param name="criteria">The criteria of the $root_name$.</param>
        public void Delete(
            $ROOT_MODEL$SetItemCriteria criteria
            )
        {
            int count = 0;

            // Get the specified $root_name$.
            var $RootParam$ = DbContext.$ROOT_MODEL$s
                .Where(e =>
                    e.$ROOT_MODEL$Key == criteria.$ROOT_MODEL$Key
                 )
                .AsNoTracking()
                .FirstOrDefault();
            if ($RootParam$ == null)
                throw new DataNotFoundException(DalText.$ROOT_MODEL$SetItem_NotFound.With($RootParam$.$ROOT_MODEL$Code));

            // Check references.
            //int dependents = 0;

            //dependents = DbContext.Others.Count(e => e.$ROOT_MODEL$Key == criteria.$ROOT_MODEL$Key);
            //if (dependents > 0)
            //    throw new DeleteFailedException(DalText.$ROOT_MODEL$SetItem_Delete_Others);

            // Delete references.

            // Delete the $root_name$.
            DbContext.$ROOT_MODEL$s.Remove($RootParam$);

            count = DbContext.SaveChanges();
            if (count == 0)
                throw new DeleteFailedException(DalText.$ROOT_MODEL$SetItem_DeleteFailed.With($RootParam$.$ROOT_MODEL$Code));
        }

        #endregion Delete
    }]]>
            </Code>
            <Declarations>
                <Literal>
                    <ID>RootModel</ID>
                    <ToolTip>The name of the root model.</ToolTip>
                    <Default>RootModel</Default>
                </Literal>
				<Literal>
					<ID>RootParam</ID>
					<ToolTip>The name of the root parameter.</ToolTip>
					<Default>RootParam</Default>
				</Literal>
				<Literal>
                    <ID>RootName</ID>
                    <ToolTip>The model name in comments.</ToolTip>
                    <Default>RootName</Default>
                </Literal>
            </Declarations>
        </Snippet>
    </CodeSnippet>
</CodeSnippets>
