<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
    <CodeSnippet Format="1.0.0">
        <Header>
			<Title>Model | Editable root collection</Title>
			<Author>Mármarosi József</Author>
			<Description>Implements an editable root collection.</Description>
			<Shortcut>c6cs-rc</Shortcut>
        </Header>
        <Snippet>
            <Code Language="CSharp">
                <![CDATA[/// <summary>
    /// Represents an editable $RootName$ collection.
    /// </summary>
    [Serializable]
    public class $RootModel$Set : EditableList<$RootModel$Set, $RootModel$SetItem, $RootModel$SetItemDto>
    {
        #region Business Rules

        //private static void AddObjectAuthorizationRules()
        //{
        //    // Add authorization rules.
        //    BusinessRules.AddRule(
        //        typeof($RootModel$Set),
        //        new IsInRole(
        //            AuthorizationActions.GetObject,
        //            "Manager"
        //            )
        //        );
        //}

        #endregion

        #region Factory Methods

        /// <summary>
        /// Gets the specified $RootName$ set to edit.
        /// </summary>
        /// <param name="factory">The data portal factory.</param>
        /// <param name="criteria">The criteria of the $RootName$ set.</param>
        /// <returns>The requested $RootName$ set.</returns>
        public static async Task<$RootModel$Set> Get(
            IDataPortalFactory factory,
            $RootModel$SetCriteria criteria
            )
        {
            return await factory.GetPortal<$RootModel$Set>().FetchAsync(criteria);
        }

        /// <summary>
        /// Rebuilds an editable $RootName$ instance from the data transfer object.
        /// </summary>
        /// <param name="factory">The data portal factory.</param>
        /// <param name="childFactory">The child data portal factory.</param>
        /// <param name="criteria">The criteria of the $RootName$ set.</param>
        /// <param name="list">The data transer objects of the $RootName$ set.</param>
        /// <returns>The $RootName$ set built.</returns>
        public static async Task<$RootModel$Set> Build(
            IDataPortalFactory factory,
            IChildDataPortalFactory childFactory,
            $RootModel$SetCriteria criteria,
            List<$RootModel$SetItemDto> list
            )
        {
            var set = await factory.GetPortal<$RootModel$Set>().FetchAsync(criteria);
            set.SetValuesById(list, "$RootModel$Id", childFactory);
            return set;
        }

        #endregion

        #region Data Access

        [Create]
        [RunLocal]
        private void Create()
        {
            // Load default values.
        }

        [Fetch]
        private void Fetch(
            $RootModel$SetCriteria criteria,
            [Inject] I$RootModel$SetDal dal,
            [Inject] IChildDataPortal<$RootModel$SetItem> itemPortal
            )
        {
            // Load values from persistent storage.
            using (LoadListMode)
            {
                List<$RootModel$SetItemDao> list = dal.Fetch(criteria);
                foreach ($RootModel$SetItemDao item in list)
                    Add(itemPortal.FetchChild(item));
            }
        }

        [Update]
        protected void Update(
            [Inject] I$RootModel$SetDal dal
            )
        {
            // Update values in persistent storage.
            using (var transaction = dal.BeginTransaction())
            {
                Child_Update();
                dal.Commit(transaction);
            }
        }

        #endregion
    }]]>
            </Code>
            <Declarations>
                <Literal>
                    <ID>RootModel</ID>
                    <ToolTip>The name of the root model.</ToolTip>
                    <Default>RootModel</Default>
                </Literal>
                <Literal>
                    <ID>RootName</ID>
                    <ToolTip>The model name in comments.</ToolTip>
                    <Default>RootName</Default>
                </Literal>
            </Declarations>
        </Snippet>
    </CodeSnippet>
</CodeSnippets>
