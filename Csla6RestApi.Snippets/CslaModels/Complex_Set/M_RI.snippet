<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
    <CodeSnippet Format="1.0.0">
        <Header>
			<Title>Model | Editable list item model</Title>
			<Author>Mármarosi József</Author>
			<Description>Implements an editable list item model.</Description>
			<Shortcut>c6cs-ri</Shortcut>
        </Header>
        <Snippet>
            <Code Language="CSharp">
                <![CDATA[/// <summary>
    /// Represents an editable $RootName$ object.
    /// </summary>
    [Serializable]
    [ValidationResourceType(typeof(ValidationText), ObjectName = "$RootModel$SetItem")]
    public class $RootModel$SetItem : EditableModel<$RootModel$SetItem, $RootModel$SetItemDto>
    {
        #region Properties

        public static readonly PropertyInfo<long?> $RootModel$KeyProperty = RegisterProperty<long?>(nameof($RootModel$Key));
        public long? $RootModel$Key
        {
            get => GetProperty($RootModel$KeyProperty);
            private set => SetProperty($RootModel$KeyProperty, value);
        }

        public static readonly PropertyInfo<long?> $RootModel$IdProperty = RegisterProperty<long?>(nameof($RootModel$Id), RelationshipTypes.PrivateField);
        public string $RootModel$Id
        {
            get => KeyHash.Encode(ID.$RootModel$, $RootModel$Key);
            set => $RootModel$Key = KeyHash.Decode(ID.$RootModel$, value);
        }

        public static readonly PropertyInfo<string> $RootModel$CodeProperty = RegisterProperty<string>(nameof($RootModel$Code));
        [Required]
        [MaxLength(10)]
        public string $RootModel$Code
        {
            get => GetProperty($RootModel$CodeProperty);
            set => SetProperty($RootModel$CodeProperty, value);
        }

        public static readonly PropertyInfo<string> $RootModel$NameProperty = RegisterProperty<string>(nameof($RootModel$Name));
        [Required]
        [MaxLength(100)]
        public string $RootModel$Name
        {
            get => GetProperty($RootModel$NameProperty);
            set => SetProperty($RootModel$NameProperty, value);
        }

        public static readonly PropertyInfo<$RootModel$Set$ChildModel$s> $ChildModel$sProperty = RegisterProperty<$RootModel$Set$ChildModel$s>(nameof($ChildModel$s));
        public $RootModel$Set$ChildModel$s $ChildModel$s
        {
            get => GetProperty($ChildModel$sProperty);
            private set => LoadProperty($ChildModel$sProperty, value);
        }

        public static readonly PropertyInfo<DateTimeOffset?> TimestampProperty = RegisterProperty<DateTimeOffset?>(nameof(Timestamp));
        public DateTimeOffset? Timestamp
        {
            get => GetProperty(TimestampProperty);
            private set => LoadProperty(TimestampProperty, value);
        }

        #endregion

        #region Business Rules

        //protected override void AddBusinessRules()
        //{
        //    // Call base class implementation to add data annotation rules to BusinessRules.
        //    // NOTE: DataAnnotation rules is always added with Priority = 0.
        //    base.AddBusinessRules();

        //    // Add validation rules.
        //    BusinessRules.AddRule(new Required($RootModel$NameProperty));

        //    // Add authorization rules.
        //    BusinessRules.AddRule(new IsInRole(
        //        AuthorizationActions.ReadProperty,
        //        $RootModel$NameProperty,
        //        "Manager"
        //        ));
        //}

        //private static void AddObjectAuthorizationRules()
        //{
        //    // Add authorization rules.
        //    BusinessRules.AddRule(
        //        typeof($RootModel$SetItem),
        //        new IsInRole(
        //            AuthorizationActions.EditObject,
        //            "Manager"
        //            )
        //        );
        //}

        #endregion

        #region Business Methods

        /// <summary>
        /// Updates an editable model and its children from the data transfer object.
        /// </summary>
        /// <param name="dto">The data transfer object.</param>
        /// <param name="childFactory">The child data portal factory.</param>
        public override void SetValuesOnBuild(
            $RootModel$SetItemDto dto,
            IChildDataPortalFactory childFactory
            )
        {
            DataMapper.Map(dto, this, "$ChildModel$s");
            BusinessRules.CheckRules();
            $ChildModel$s.SetValuesById(dto.$ChildModel$s, "$ChildModel$Id", childFactory);
        }

        #endregion

        #region Data Access

        [CreateChild]
        private void Create(
            [Inject] IChildDataPortal<$RootModel$Set$ChildModel$s> itemsPortal
            )
        {
            // Set values from data transfer object.
            $ChildModel$s = itemsPortal.CreateChild();
            //LoadProperty($RootModel$CodeProperty, "");
            //BusinessRules.CheckRules();
        }

        [FetchChild]
        private void Fetch(
            $RootModel$SetItemDao dao,
            [Inject] IChildDataPortal<$RootModel$Set$ChildModel$s> itemsPortal
            )
        {
            // Set values from data access object.
            using (BypassPropertyChecks)
            {
                DataMapper.Map(dao, this, "$ChildModel$s");
                $ChildModel$s = itemsPortal.FetchChild(dao.$ChildModel$s);
            }
        }

        [InsertChild]
        private void Insert(
            [Inject] I$RootModel$SetItemDal dal
            )
        {
            // Insert values into persistent storage.
            using (BypassPropertyChecks)
            {
                var dao = Copy.PropertiesFrom(this).Omit("$ChildModel$s").ToNew<$RootModel$SetItemDao>();
                dal.Insert(dao);

                // Set new data.
                $RootModel$Key = dao.$RootModel$Key;
                Timestamp = dao.Timestamp;
            }
            FieldManager.UpdateChildren(this);
        }

        [UpdateChild]
        private void Update(
            [Inject] I$RootModel$SetItemDal dal
            )
        {
            // Update values in persistent storage.
            if (IsSelfDirty)
            {
                using (BypassPropertyChecks)
                {
                    var dao = Copy.PropertiesFrom(this).Omit("$ChildModel$s").ToNew<$RootModel$SetItemDao>();
                    dal.Update(dao);

                    // Set new data.
                    Timestamp = dao.Timestamp;
                }
            }
            FieldManager.UpdateChildren(this);
        }

        [DeleteSelfChild]
        private void DeleteSelf(
            [Inject] I$RootModel$SetItemDal dal
            )
        {
            // Delete values from persistent storage.
            if ($RootModel$Key.HasValue)
            {
                $ChildModel$s.Clear();
                FieldManager.UpdateChildren(this);

                var criteria = new $RootModel$SetItemCriteria($RootModel$Key);
                dal.Delete(criteria);
            }
        }

        #endregion
    }]]>
            </Code>
            <Declarations>
                <Literal>
                    <ID>RootModel</ID>
                    <ToolTip>The name of the root model.</ToolTip>
                    <Default>RootModel</Default>
                </Literal>
                <Literal>
                    <ID>RootName</ID>
                    <ToolTip>The model name in comments.</ToolTip>
                    <Default>RootName</Default>
                </Literal>
				<Literal>
					<ID>ChildModel</ID>
					<ToolTip>The name of the child model.</ToolTip>
					<Default>ChildModel</Default>
				</Literal>
			</Declarations>
        </Snippet>
    </CodeSnippet>
</CodeSnippets>
