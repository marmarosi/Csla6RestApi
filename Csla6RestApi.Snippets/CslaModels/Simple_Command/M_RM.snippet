<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
    <CodeSnippet Format="1.0.0">
        <Header>
			<Title>Model | Command model</Title>
			<Author>Mármarosi József</Author>
			<Description>Implements a command model.</Description>
			<Shortcut>c6sc-rm</Shortcut>
        </Header>
        <Snippet>
            <Code Language="CSharp">
                <![CDATA[/// <summary>
    /// Renames the specified $RootName$.
    /// </summary>
    [Serializable]
    public class $CommandModel$ : CommandBase<$CommandModel$>
    {
        #region Properties

        public static readonly PropertyInfo<long?> $RootModel$KeyProperty = RegisterProperty<long?>(nameof($RootModel$Key));
        public long? $RootModel$Key
        {
            get => ReadProperty($RootModel$KeyProperty);
            private set => LoadProperty($RootModel$KeyProperty, value);
        }

        public static readonly PropertyInfo<long?> $RootModel$IdProperty = RegisterProperty<long?>(nameof($RootModel$Id), RelationshipTypes.PrivateField);
        public string $RootModel$Id
        {
            get => KeyHash.Encode(ID.$RootModel$, $RootModel$Key);
            set => $RootModel$Key = KeyHash.Decode(ID.$RootModel$, value);
        }

        public static readonly PropertyInfo<string> $RootModel$NameProperty = RegisterProperty<string>(c => c.$RootModel$Name);
        public string $RootModel$Name
        {
            get => ReadProperty($RootModel$NameProperty);
            private set => LoadProperty($RootModel$NameProperty, value);
        }

        public static readonly PropertyInfo<bool> ResultProperty = RegisterProperty<bool>(c => c.Result);
        public bool Result
        {
            get => ReadProperty(ResultProperty);
            private set => LoadProperty(ResultProperty, value);
        }

        #endregion

        #region Business Rules

        private void Validate()
        {
            if (string.IsNullOrEmpty($RootModel$Name))
                throw new BrokenRulesException(
                    nameof($CommandModel$),
                    nameof($RootModel$Name),
                    ValidationText.$CommandModel$_$RootModel$Name_Required
                    );
        }

        //private static void AddObjectAuthorizationRules()
        //{
        //    // Add authorization rules.
        //    BusinessRules.AddRule(
        //        typeof($CommandModel$),
        //        new IsInRole(
        //            AuthorizationActions.ExecuteMethod,
        //            "Manager"
        //            )
        //        );
        //}

        #endregion

        #region Factory Methods

        /// <summary>
        /// Renames the specified $RootName$.
        /// </summary>
        /// <param name="factory">The data portal factory.</param>
        /// <param name="dto">The data transer object of the rename $RootName$ command.</param>
        /// <returns>True when the $RootName$ was renamed; otherwise false.</returns>
        public static async Task<$CommandModel$> Execute(
            IDataPortalFactory factory,
            $CommandModel$Dto dto
            )
        {
            return await factory.GetPortal<$CommandModel$>().ExecuteAsync(dto);
        }

        #endregion

        #region Data Access

        [Execute]
        private void Execute(
            $CommandModel$Dto dto,
            [Inject] I$CommandModel$Dal dal
            )
        {
            // Execute the command.
            $RootModel$Id = dto.$RootModel$Id;
            $RootModel$Name = dto.$RootModel$Name;
            Validate();

            using (var transaction = dal.BeginTransaction())
            {
                $CommandModel$Dao dao = new $CommandModel$Dao($RootModel$Key ?? 0, $RootModel$Name);
                dal.Execute(dao);
            }

            // Set new data.
            Result = true;
        }

        #endregion
    }]]>
            </Code>
            <Declarations>
				<Literal>
					<ID>CommandModel</ID>
					<ToolTip>The name of the command model.</ToolTip>
					<Default>CommandModel</Default>
				</Literal>
				<Literal>
                    <ID>RootModel</ID>
                    <ToolTip>The name of the root model.</ToolTip>
                    <Default>RootModel</Default>
                </Literal>
                <Literal>
                    <ID>RootName</ID>
                    <ToolTip>The model name in comments.</ToolTip>
                    <Default>RootName</Default>
                </Literal>
            </Declarations>
        </Snippet>
    </CodeSnippet>
</CodeSnippets>
