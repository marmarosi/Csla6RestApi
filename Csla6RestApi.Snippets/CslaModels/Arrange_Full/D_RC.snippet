<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
    <CodeSnippet Format="1.0.0">
        <Header>
			<Title>DAL | Read-only root collection</Title>
			<Author>Mármarosi József</Author>
			<Description>Implements the data access of the read-only root collection.</Description>
			<Shortcut>c6af-rc-d</Shortcut>
        </Header>
        <Snippet>
            <Code Language="CSharp">
                <![CDATA[/// <summary>
    /// Implements the data access functions of the read-only $root_name$ collection.
    /// </summary>
    [DalImplementation]
    public class $ROOT_MODEL$ListDal : DalBase<$DB_CONTEXT$>, I$ROOT_MODEL$ListDal
    {
        #region Constructor

        /// <summary>
        /// Instantiates the data access object.
        /// </summary>
        /// <param name="context">The database context.</param>
        public $ROOT_MODEL$ListDal(
            $DB_CONTEXT$ dbContext
            )
        {
            DbContext = dbContext;
        }

        #endregion Constructor

        #region Fetch

        /// <summary>
        /// Gets the specified page of sorted $root_name$s.
        /// </summary>
        /// <param name="criteria">The criteria of the $root_name$ list.</param>
        /// <returns>The requested page of the sorted $root_name$ list.</returns>
        public IPaginatedList<$ROOT_MODEL$ListItemDao> Fetch(
            $ROOT_MODEL$ListCriteria criteria
            )
        {
            // Filter the $root_name$s.
            var query = DbContext.$ROOT_MODEL$s
                .Where(e =>
                    criteria.$ROOT_MODEL$Name == null || e.$ROOT_MODEL$Name.Contains(criteria.$ROOT_MODEL$Name)
                );

            // Sort the items.
            var sorted = query
                .Select(e => new $ROOT_MODEL$ListItemDao
                {
                    $ROOT_MODEL$Key = e.$ROOT_MODEL$Key,
                    $ROOT_MODEL$Code = e.$ROOT_MODEL$Code,
                    $ROOT_MODEL$Name = e.$ROOT_MODEL$Name
                });

            switch (criteria.SortBy)
            {
                case $ROOT_MODEL$ListSortBy.$ROOT_MODEL$Code:
                    sorted = criteria.SortDirection == SortDirection.Ascending
                        ? sorted.OrderBy(e => e.$ROOT_MODEL$Code)
                        : sorted.OrderByDescending(e => e.$ROOT_MODEL$Code);
                    break;
                // case $ROOT_MODEL$ListSortBy.$ROOT_MODEL$Name:
                default:
                    sorted = criteria.SortDirection == SortDirection.Ascending
                        ? sorted.OrderBy(e => e.$ROOT_MODEL$Name)
                        : sorted.OrderByDescending(e => e.$ROOT_MODEL$Name);
                    break;
            }

            // Get the requested page.
            var list = sorted
                .Skip(criteria.PageIndex * criteria.PageSize)
                .Take(criteria.PageSize)
                .AsNoTracking()
                .ToList();

            // Count the matching $root_name$s.
            int totalCount = query.Count();

            // Return the result.
            return new PaginatedList<$ROOT_MODEL$ListItemDao>
            {
                Data = list,
                TotalCount = totalCount
            };
        }

        #endregion GetList
    }]]>
            </Code>
            <Declarations>
                <Literal>
                    <ID>DB_CONTEXT</ID>
                    <ToolTip>The name of the database context.</ToolTip>
                    <Default>DB_CONTEXT</Default>
                </Literal>
                <Literal>
                    <ID>ROOT_MODEL</ID>
                    <ToolTip>The name of the root model.</ToolTip>
                    <Default>ROOT_MODEL</Default>
                </Literal>
                <Literal>
                    <ID>root_name</ID>
                    <ToolTip>The model name in comments.</ToolTip>
                    <Default>root_name</Default>
                </Literal>
            </Declarations>
        </Snippet>
    </CodeSnippet>
</CodeSnippets>
