<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
    <CodeSnippet Format="1.0.0">
        <Header>
			<Title>Model | Read-only list item model</Title>
			<Author>Mármarosi József</Author>
			<Description>Implements a read-only list item model.</Description>
			<Shortcut>c6sl-ri</Shortcut>
        </Header>
        <Snippet>
            <Code Language="CSharp">
                <![CDATA[/// <summary>
    /// Represents an item in a read-only $RootName$ collection.
    /// </summary>
    [Serializable]
    public class $RootModel$ListItem : ReadOnlyModel<$RootModel$ListItem>
    {
        #region Properties

        public static readonly PropertyInfo<long?> $RootModel$KeyProperty = RegisterProperty<long?>(nameof($RootModel$Key));
        public long? $RootModel$Key
        {
            get => GetProperty($RootModel$KeyProperty);
            private set => LoadProperty($RootModel$KeyProperty, value);
        }

        public static readonly PropertyInfo<long?> $RootModel$IdProperty = RegisterProperty<long?>(nameof($RootModel$Id), RelationshipTypes.PrivateField);
        public string $RootModel$Id
        {
            get => KeyHash.Encode(ID.$RootModel$, $RootModel$Key);
            private set => $RootModel$Key = KeyHash.Decode(ID.$RootModel$, value);
        }

        public static readonly PropertyInfo<string> $RootModel$CodeProperty = RegisterProperty<string>(nameof($RootModel$Code));
        public string $RootModel$Code
        {
            get => GetProperty($RootModel$CodeProperty);
            private set => LoadProperty($RootModel$CodeProperty, value);
        }

        public static readonly PropertyInfo<string> $RootModel$NameProperty = RegisterProperty<string>(nameof($RootModel$Name));
        public string $RootModel$Name
        {
            get => GetProperty($RootModel$NameProperty);
            private set => LoadProperty($RootModel$NameProperty, value);
        }

        #endregion

        #region Business Rules

        //protected override void AddBusinessRules()
        //{
        //    // Add authorization rules.
        //    BusinessRules.AddRule(
        //        new IsInRole(
        //            AuthorizationActions.ReadProperty,
        //            $RootModel$NameProperty,
        //            "Manager"
        //            )
        //        );
        //}

        //private static void AddObjectAuthorizationRules()
        //{
        //    // Add authorization rules.
        //    BusinessRules.AddRule(
        //        typeof($RootModel$View),
        //        new IsInRole(
        //            AuthorizationActions.GetObject,
        //            "Manager"
        //            )
        //        );
        //}

        #endregion

        #region Data Access

        [FetchChild]
        protected void Fetch(
            $RootModel$ListItemDao dao
            )
        {
            // Set values from data access object.
            DataMapper.Map(dao, this);
        }

        #endregion
    }]]>
            </Code>
            <Declarations>
                <Literal>
                    <ID>RootModel</ID>
                    <ToolTip>The name of the root model.</ToolTip>
                    <Default>RootModel</Default>
                </Literal>
                <Literal>
                    <ID>RootName</ID>
                    <ToolTip>The model name in comments.</ToolTip>
                    <Default>RootName</Default>
                </Literal>
            </Declarations>
        </Snippet>
    </CodeSnippet>
</CodeSnippets>
