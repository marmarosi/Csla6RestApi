<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
    <CodeSnippet Format="1.0.0">
        <Header>
			<Title>Model | Read-only child model</Title>
			<Author>Mármarosi József</Author>
			<Description>Implements a read-only child model.</Description>
			<Shortcut>c6cl-ci</Shortcut>
        </Header>
        <Snippet>
            <Code Language="CSharp">
                <![CDATA[/// <summary>
    /// Represents an item in a read-only $child_name$ info collection.
    /// </summary>
    [Serializable]
    public class $CHILD_MODEL$Info : ReadOnlyModel<$CHILD_MODEL$Info>
    {
        #region Properties

        public static readonly PropertyInfo<long?> $CHILD_MODEL$KeyProperty = RegisterProperty<long?>(nameof($CHILD_MODEL$Key));
        public long? $CHILD_MODEL$Key
        {
            get => GetProperty($CHILD_MODEL$KeyProperty);
            private set => LoadProperty($CHILD_MODEL$KeyProperty, value);
        }

        public static readonly PropertyInfo<long?> $CHILD_MODEL$IdProperty = RegisterProperty<long?>(nameof($CHILD_MODEL$Id), RelationshipTypes.PrivateField);
        public string $CHILD_MODEL$Id
        {
            get => KeyHash.Encode(ID.$CHILD_MODEL$, $CHILD_MODEL$Key);
            private set => $CHILD_MODEL$Key = KeyHash.Decode(ID.$CHILD_MODEL$, value);
        }

        public static readonly PropertyInfo<string> $CHILD_MODEL$CodeProperty = RegisterProperty<string>(nameof($CHILD_MODEL$Code));
        public string $CHILD_MODEL$Code
        {
            get => GetProperty($CHILD_MODEL$CodeProperty);
            private set => LoadProperty($CHILD_MODEL$CodeProperty, value);
        }

        public static readonly PropertyInfo<string> $CHILD_MODEL$NameProperty = RegisterProperty<string>(nameof($CHILD_MODEL$Name));
        public string $CHILD_MODEL$Name
        {
            get => GetProperty($CHILD_MODEL$NameProperty);
            private set => LoadProperty($CHILD_MODEL$NameProperty, value);
        }

        #endregion

        #region Business Rules

        //protected override void AddBusinessRules()
        //{
        //    // Add authorization rules.
        //    BusinessRules.AddRule(
        //        new IsInRole(
        //            AuthorizationActions.ReadProperty,
        //            $CHILD_MODEL$NameProperty,
        //            "Manager"
        //            )
        //        );
        //}

        //private static void AddObjectAuthorizationRules()
        //{
        //    // Add authorization rules.
        //    BusinessRules.AddRule(
        //        typeof($CHILD_MODEL$Info),
        //        new IsInRole(
        //            AuthorizationActions.GetObject,
        //            "Manager"
        //            )
        //        );
        //}

        #endregion

        #region Data Access

        [FetchChild]
        private void Fetch(
            $CHILD_MODEL$InfoDao dao
            )
        {
            // Load values from persistent storage.
            DataMapper.Map(dao, this);
        }

        #endregion
    }]]>
            </Code>
            <Declarations>
				<Literal>
					<ID>ChildModel</ID>
					<ToolTip>The name of the child model.</ToolTip>
					<Default>ChildModel</Default>
				</Literal>
				<Literal>
					<ID>ChildName</ID>
					<ToolTip>The model name in comments.</ToolTip>
					<Default>ChildName</Default>
				</Literal>
			</Declarations>
        </Snippet>
    </CodeSnippet>
</CodeSnippets>
