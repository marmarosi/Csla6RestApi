<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
    <CodeSnippet Format="1.0.0">
        <Header>
			<Title>DAL | Read-only root collection</Title>
			<Author>Mármarosi József</Author>
			<Description>Implements the data access of the read-only root collection.</Description>
            <Shortcut>c6tvrcd</Shortcut>
        </Header>
        <Snippet>
            <Code Language="CSharp">
                <![CDATA[/// <summary>
    /// Implements the data access functions of the read-only $root_name$ tree.
    /// </summary>
    [DalImplementation]
    public class $ROOT_MODEL$TreeDal : DalBase<$DB_CONTEXT$>, I$ROOT_MODEL$TreeDal
    {
        #region Constructor

        /// <summary>
        /// Instantiates the data access object.
        /// </summary>
        /// <param name="context">The database context.</param>
        public $ROOT_MODEL$TreeDal(
            $DB_CONTEXT$ dbContext
            )
        {
            DbContext = dbContext;
        }

        #endregion Constructor

        #region Fetch

        private List<$ROOT_MODEL$NodeDao> All$ROOT_MODEL$s { get; set; }

        /// <summary>
        /// Gets the specified $root_name$ tree.
        /// </summary>
        /// <param name="criteria">The criteria of the $root_name$ tree.</param>
        /// <returns>The requested $root_name$ tree.</returns>
        public List<$ROOT_MODEL$NodeDao> Fetch(
            $ROOT_MODEL$TreeCriteria criteria
            )
        {
            var tree = new List<$ROOT_MODEL$NodeDao>();

            // Get all sub$root_name$s of the root foolder.
            All$ROOT_MODEL$s = DbContext.$ROOT_MODEL$s
                .Where(e =>
                    e.RootKey == criteria.RootKey
                )
                .Select(e => new $ROOT_MODEL$NodeDao
                {
                    $ROOT_MODEL$Key = e.$ROOT_MODEL$Key,
                    ParentKey = e.ParentKey,
                    $ROOT_MODEL$Order = e.$ROOT_MODEL$Order,
                    $ROOT_MODEL$Name = e.$ROOT_MODEL$Name
                })
                .AsNoTracking()
                .ToList();

            // Populate the tree.
            PopulateLevel(1, null, tree);

            // Return the result.
            return tree;
        }

        private void PopulateLevel(
            int level,
            long? parentKey,
            List<$ROOT_MODEL$NodeDao> parentChildren
            )
        {
            // Get the $root_name$s of the level.
            var $root_model$s = All$ROOT_MODEL$s
                .Where(o => o.ParentKey == parentKey)
                .OrderBy(o => o.$ROOT_MODEL$Order)
                .ToList();

            foreach ($ROOT_MODEL$NodeDao $root_model$ in $root_model$s)
            {
                // Create $root_name$ node.
                $ROOT_MODEL$NodeDao $root_model$Node = new $ROOT_MODEL$NodeDao
                {
                    $ROOT_MODEL$Key = $root_model$.$ROOT_MODEL$Key,
                    ParentKey = $root_model$.ParentKey,
                    $ROOT_MODEL$Order = $root_model$.$ROOT_MODEL$Order,
                    $ROOT_MODEL$Name = $root_model$.$ROOT_MODEL$Name,
                    Level = level,
                    Children = new List<$ROOT_MODEL$NodeDao>()
                };

                // Add $root_name$ to the parent's children.
                parentChildren.Add($root_model$Node);

                // Get the sub$root_name$s of this $root_name$.
                PopulateLevel(
                    level + 1,
                    $root_model$.$ROOT_MODEL$Key,
                    $root_model$Node.Children
                    );
            }
        }

        #endregion GetList
    }]]>
            </Code>
            <Declarations>
                <Literal>
                    <ID>DB_CONTEXT</ID>
                    <ToolTip>The name of the database context.</ToolTip>
                    <Default>DB_CONTEXT</Default>
                </Literal>
                <Literal>
                    <ID>ROOT_MODEL</ID>
                    <ToolTip>The name of the root model.</ToolTip>
                    <Default>ROOT_MODEL</Default>
                </Literal>
				<Literal>
					<ID>root_model</ID>
					<ToolTip>The root model variable.</ToolTip>
					<Default>root_model</Default>
				</Literal>
				<Literal>
                    <ID>root_name</ID>
                    <ToolTip>The model name in comments.</ToolTip>
                    <Default>root_name</Default>
                </Literal>
            </Declarations>
        </Snippet>
    </CodeSnippet>
</CodeSnippets>
